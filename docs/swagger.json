{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "MomJourney API",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "API for managing tasks, diaries, users, and authentication for the MomJourney app."
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations for user registration, login, and authentication management."
    },
    {
      "name": "Diaries",
      "description": "Operations for managing diaries."
    },
    {
      "name": "Tasks",
      "description": "Operations for managing tasks."
    },
    {
      "name": "Users",
      "description": "Operations for managing user profiles."
    },
    {
      "name": "Week",
      "description": "Operations related to weekly plans or summaries."
    },
    {
      "name": "Emotions",
      "description": "Operations for managing emotions"
    }
  ],
  "paths": {
    "/api/emotions": {
      "get": {
        "tags": [
          "Emotions"
        ],
        "summary": "Get list of emotions",
        "operationId": "getAllEmotions",
        "description": "Retrieve a list of all emotions available in the system.",
        "security": [],
        "responses": {
          "200": {
            "description": "A list of emotions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found emotions!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "emotions"
                      ],
                      "properties": {
                        "emotions": {
                          "type": "array",
                          "items": {

                            "type": "object",
                            "required": [
                              "_id",
                              "title"
                            ],
                            "properties": {
                              "_id": {
                                "type": "string",
                                "example": "6895bd86a5c677999ed2ae14"
                              },
                              "title": {
                                "type": "string",
                                "example": "Апатія"
                              }
                            }

                            "$ref": "#/components/schemas/emotion"

                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshSession",
        "description": "Refreshes an existing session using a refresh token. Returns a new access token.",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "48e4aaqcdd286b85465d5f5"
            },
            "description": "ID of the current session"
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "required": true,
            "schema": {
              "type": "string",
              "example": "HYhjkhduyLKLUIuoKKLFGHJKLjklsdfgh"
            },
            "description": "Refresh token to renew the session"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed a session!",
            "headers": {
              "Set-Cookie": {
                "description": "Cookies set after successful login.",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "example": [
                      "session_id=test321; Path=/; HttpOnly;",
                      "refresh_token=get471; Path=/; HttpOnly;"
                    ]
                  }
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "sdfghjk852dfvgbn41sdfg52df4152"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },

    "/api/users/avatar": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user avatar",
        "operationId": "updateUserAvatar",
        "description": "Updates the authenticated user's avatar by uploading a new image to Cloudinary.",

    "/api/diaries/{diaryId}": {
      "patch": {
        "tags": [
          "Diaries"
        ],
        "summary": "Update diary",
        "operationId": "updateDiary",
        "description": "Update an existing diary entry by its ID. Only the user who created the diary (userId) can update it.",

        "security": [
          {
            "bearerAuth": []
          }
        ],

        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "The image file to upload as the user's avatar."

        "parameters": [
          {
            "in": "path",
            "name": "diaryId",
            "required": true,
            "schema": {
              "type": "string",
              "example": "65ca67e7ae7f10c88b598384"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Diary title",
                    "example": "My first diary entry"
                  },
                  "category": {
                    "type": "string",
                    "description": "Emotion category ObjectId",
                    "example": "6895bd86a5c677999ed2ae14"
                  },
                  "description": {
                    "type": "string",
                    "description": "Diary content",
                    "example": "Today I felt very productive and motivated."

                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {

            "description": "Successfully updated the user's avatar.",

            "description": "Successfully updated a diary entry",

            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",

                      "example": "Successfully updated avatar!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "_id": {
                          "type": "string",
                          "example": "64a67e7ae7f10c88b598384"
                        },
                        "name": {
                          "type": "string",
                          "example": "John Doe"
                        },
                        "email": {
                          "type": "string",
                          "example": "johndoe@example.com"
                        },
                        "avatar": {
                          "type": "string",
                          "example": "https://res.cloudinary.com/dbklkudk0/image/upload/v1691234567/avatar.jpg"
                        }
                      }

                      "example": "Successfully updated a diary!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/diary"

                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },


          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/api/tasks/": {
      "post": {
        "tags": [
          "Tasks"
        ],
        "summary": "createTask",
        "description": "priveate endpoint to create a task",
        "operationId": "createTask",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "date"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "example": "Buy milk",
                    "description": "The name of the task"
                  },
                  "date": {
                    "type": "string",
                    "example": "2025-09-18",
                    "description": "date is in format YYYY-MM-DD"
                  },
                  "isDone": {
                    "type": "boolean",
                    "example": false,
                    "description": "Task completion status"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },

          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },


    "schemas": {
      "emotion": {
        "type": "object",
        "required": [
          "_id",
          "title"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "6895bd86a5c677999ed2ae14"
          },
          "title": {
            "type": "string",
            "example": "Апатія"
          }
        }
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "64da56b7de7f10c88b598123"
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          }
        }
      },
      "diary": {
        "type": "object",
        "required": [
          "_id",
          "title",
          "description",
          "category",
          "userId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "64da56b7de7f10c88b598123"
          },
          "title": {
            "type": "string",
            "example": "My first diary"
          },
          "description": {
            "type": "string",
            "example": "This is a test diary"
          },
          "category": {
            "$ref": "#/components/schemas/emotion"
          },
          "userId": {
            "$ref": "#/components/schemas/user"
          }
        }
      },
      "Task": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "date",
          "isDone",
          "userId"
        ],
        "properties": {
          "_id": {
            "type": "string",
            "example": "650f1c2e2e8b2c001e8b4567"
          },
          "name": {
            "type": "string",
            "example": "Buy milk",
            "description": "The name of the task"
          },
          "date": {
            "type": "string",
            "example": "2025-09-18",
            "description": "date is in format YYYY-MM-DD"
          },
          "isDone": {
            "type": "boolean",
            "example": false,
            "description": "Task completion status"
          },
          "userId": {
            "type": "string",
            "example": "650f1c2e2e8b2c001e8b1234"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-17"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-09-17"
          }
        }
      }
    },

    "responses": {
      "400": {
        "description": "Bad request due to validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "path",
                    "message"
                  ],
                  "properties": {
                    "path": {
                      "type": "string",
                      "example": "field"
                    },
                    "message": {
                      "type": "string",
                      "example": "Validation failed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",

                      "example": "Access token expired"

                      "example": "Unauthorized access"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Resource not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Bad request - validation or general client error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Bad request"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Validation failed or invalid request data"

                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Something went wrong!"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}